<?php
/******************************************************************************\
|*                                                                            *|
|* All text, code and logic contained herein is copyright by Installatron LLC *|
|* and is a part of 'the Installatron program' as defined in the Installatron *|
|* license: http://installatron.com/plugin/eula                               *|
|*                                                                            *|
|* THE COPYING OR REPRODUCTION OF ANY TEXT, PROGRAM CODE OR LOGIC CONTAINED   *|
|* HEREIN IS EXPRESSLY PROHIBITED. VIOLATORS WILL BE PROSECUTED TO THE FULL   *|
|* EXTENT OF THE LAW.                                                         *|
|*                                                                            *|
|* If this license is not clear to you, DO NOT CONTINUE;                      *|
|* instead, contact Installatron LLC at: support@installatron.com             *|
|*                                                                            *|
\******************************************************************************/
@chdir('/homepages/10/d4296871516/htdocs/wordpress');$GLOBALS["orig_max_execution_time"] = intval(ini_get("max_execution_time"));if (function_exists("set_time_limit")) @set_time_limit(0);if (function_exists("ini_set")) @ini_set("max_execution_time", 0);if (function_exists("ini_set")) @ini_set("memory_limit", "1024M");$GLOBALS["_fileowner"] = fileowner(__FILE__);if (isset($_SERVER["I_POST"])){parse_str($_SERVER["I_POST"],$_GET);$_POST = $_REQUEST = array_merge($_GET,$_POST);}else if (empty($_REQUEST)){$_REQUEST = array_merge($_GET,$_POST);}set_error_handler("__i_client_error_handler");$GLOBALS["__i_client_error_stack"] = array();function __i_client_error_handler($errno, $errstr, $errfile, $errline){if (!(error_reporting() & $errno)){return;}switch ($errno){case E_ERROR:case E_USER_ERROR:$GLOBALS["__i_client_error_stack"][] = "Error: ".$errstr." in ".$errfile."[$errline] (PHP ".PHP_VERSION." ".PHP_OS.")";echo '__CLIENT__RESPONCE__START__'.serialize(array(false,$GLOBALS["__i_client_error_stack"]))."__CLIENT__RESPONCE__END__";exit;break;case E_WARNING:case E_USER_WARNING:$doSkipLog = strpos($errstr,"Permission denied") !== false && strpos($errstr,"unlink(") !== false|| strpos($errstr,"chmod(): Operation not permitted") !== false|| strpos($errstr,"wp-content/plugins") !== false;if (!$doSkipLog){$GLOBALS["__i_client_error_stack"][] = $errstr." in ".$errfile."[$errline] (PHP ".PHP_VERSION." ".PHP_OS.")";}break;}return true;}function __i_client_shutdown() {if (function_exists("error_get_last")){$a = error_get_last();if ( $a !== null && $a["type"] === 1 ){$GLOBALS["__i_client_error_stack"][] = "Fatal Error: ".$a["message"]." in ".$a["file"]."[".$a["line"]."]";echo '__CLIENT__RESPONCE__START__'.serialize(array(false,$GLOBALS["__i_client_error_stack"]))."__CLIENT__RESPONCE__END__";}}} register_shutdown_function("__i_client_shutdown");if ( time()-filemtime(__FILE__) > 86400 ) { $GLOBALS["__i_client_error_stack"][] = "TTL exceeded"; exit; }?><?php 
 if (version_compare(PHP_VERSION, "4.3.0", "<")) { die("fatal error: Installatron requires a control panel PHP install of at least version 4.3.0."); } if (!defined('PATH_SEPARATOR')) { define("PATH_SEPARATOR", strtoupper(substr(PHP_OS, 0, 3) == "WIN") ? ";" : ":" ); } if (!function_exists('scandir')) { if (!defined("SCANDIR_SORT_NONE")) { define("SCANDIR_SORT_NONE", 0); } if (!defined("SCANDIR_SORT_ASCENDING")) { define("SCANDIR_SORT_ASCENDING", 0); } if (!defined("SCANDIR_SORT_DESCENDING")) { define("SCANDIR_SORT_DESCENDING", 1); } function scandir($directory, $sorting_order = 0) { if (!is_string($directory)) { user_error('scandir() expects parameter 1 to be string, ' . gettype($directory) . ' given', E_USER_WARNING); return; } if (!is_int($sorting_order) && !is_bool($sorting_order)) { user_error('scandir() expects parameter 2 to be long, ' . gettype($sorting_order) . ' given', E_USER_WARNING); return; } if (!is_dir($directory) || (false === $fh = @opendir($directory))) { user_error('scandir() failed to open dir: Invalid argument', E_USER_WARNING); return false; } $files = array (); while (false !== ($filename = readdir($fh))) { $files[] = $filename; } closedir($fh); if ($sorting_order == 1) { rsort($files); } else { sort($files); } return $files; } } if (!function_exists('array_combine')) { function array_combine($keys, $values) { if (!is_array($keys)) { user_error('array_combine() expects parameter 1 to be array, ' . gettype($keys) . ' given', E_USER_WARNING); return; } if (!is_array($values)) { user_error('array_combine() expects parameter 2 to be array, ' . gettype($values) . ' given', E_USER_WARNING); return; } $key_count = count($keys); $value_count = count($values); if ($key_count !== $value_count) { user_error('array_combine() Both parameters should have equal number of elements', E_USER_WARNING); return false; } if ($key_count === 0 || $value_count === 0) { user_error('array_combine() Both parameters should have number of elements at least 0', E_USER_WARNING); return false; } $keys = array_values($keys); $values = array_values($values); $combined = array(); for ($i = 0; $i < $key_count; $i++) { $combined[$keys[$i]] = $values[$i]; } return $combined; } } if (!function_exists('str_split')) { function str_split($string, $split_length = 1) { if (!is_scalar($split_length)) { user_error('str_split() expects parameter 2 to be long, ' . gettype($split_length) . ' given', E_USER_WARNING); return false; } $split_length = (int) $split_length; if ($split_length < 1) { user_error('str_split() The length of each segment must be greater than zero', E_USER_WARNING); return false; } if ($split_length < 65536) { preg_match_all('/.{1,' . $split_length . '}/s', $string, $matches); return $matches[0]; } else { $arr = array(); $idx = 0; $pos = 0; $len = strlen($string); while ($len > 0) { $blk = ($len < $split_length) ? $len : $split_length; $arr[$idx++] = substr($string, $pos, $blk); $pos += $blk; $len -= $blk; } return $arr; } } } if (!function_exists("stripos")) { function stripos($haystack, $needle, $offset = null) { if (!is_scalar($haystack)) { user_error('stripos() expects parameter 1 to be string, ' . gettype($haystack) . ' given', E_USER_WARNING); return false; } if (!is_scalar($needle)) { user_error('stripos() needle is not a string or an integer.', E_USER_WARNING); return false; } if (!is_int($offset) && !is_bool($offset) && !is_null($offset)) { user_error('stripos() expects parameter 3 to be long, ' . gettype($offset) . ' given', E_USER_WARNING); return false; } $fix = 0; if (!is_null($offset)) { if ($offset > 0) { $haystack = substr($haystack, $offset, strlen($haystack) - $offset); $fix = $offset; } } $segments = explode(strtolower($needle), strtolower($haystack), 2); if (count($segments) === 1) { return false; } $position = strlen($segments[0]) + $fix; return $position; } } if (!function_exists("str_ireplace")) { function str_ireplace($search, $replace, $subject) { if (is_string($search) && is_array($replace)) { user_error('Array to string conversion', E_USER_NOTICE); $replace = (string) $replace; } $search = (array) $search; $length_search = count($search); $replace = is_array($replace) ? array_pad($replace, $length_search, '') : array_pad(array(), $length_search, $replace); $was_string = false; if (is_string($subject)) { $was_string = true; $subject = array ($subject); } foreach ($search as $search_key => $search_value) { $search[$search_key] = '/' . preg_quote($search_value, '/') . '/i'; } $replace = str_replace(array('\\', '$'), array('\\\\', '\$'), $replace); $result = preg_replace($search, $replace, $subject); return $was_string ? $result[0] : $result; } } if (!function_exists("http_build_query")) { function http_build_query($formdata, $numeric_prefix = null, $separator = null) { if (is_object($formdata)) { $formdata = get_object_vars($formdata); } if (!is_array($formdata)) { user_error('http_build_query() Parameter 1 expected to be Array or Object. Incorrect value given.', E_USER_WARNING); return false; } if (empty($formdata)) { return; } if ( $separator === null ) { $separator = ini_get('arg_separator.output'); if (strlen($separator) == 0) { $separator = '&'; } } $tmp = array (); foreach ($formdata as $key => $val) { if (is_null($val)) { continue; } if (is_integer($key) && $numeric_prefix != null) { $key = $numeric_prefix . $key; } if (is_scalar($val)) { array_push($tmp, urlencode($key) . '=' . urlencode($val)); continue; } if (is_array($val) || is_object($val)) { array_push($tmp, http_build_query_helper($val, urlencode($key))); continue; } return null; } return implode($separator, $tmp); } function http_build_query_helper($array, $name) { $tmp = array (); foreach ($array as $key => $value) { if (is_array($value)) { array_push($tmp, http_build_query_helper($value, sprintf('%s[%s]', $name, $key))); } elseif (is_scalar($value)) { array_push($tmp, sprintf('%s[%s]=%s', $name, urlencode($key), urlencode($value))); } elseif (is_object($value)) { array_push($tmp, http_build_query_helper(get_object_vars($value), sprintf('%s[%s]', $name, $key))); } } $separator = ini_get('arg_separator.output'); if (strlen($separator) == 0) { $separator = '&'; } return implode($separator, $tmp); } } 
 if (!isset($_SERVER["REQUEST_TIME"])) { $_SERVER["REQUEST_TIME"] = time(); } if (!defined("SCANDIR_SORT_NONE")) { define("SCANDIR_SORT_NONE", 0); } if (!defined("SCANDIR_SORT_ASCENDING")) { define("SCANDIR_SORT_ASCENDING", 0); } if (!defined("SCANDIR_SORT_DESCENDING")) { define("SCANDIR_SORT_DESCENDING", 1); } if (!defined('FILE_USE_INCLUDE_PATH')) { define('FILE_USE_INCLUDE_PATH', 1); } if (!defined('FILE_APPEND')) { define('FILE_APPEND', 8); } if ( !function_exists("file_put_contents") || !defined("LOCK_EX") ) { if (!defined("LOCK_EX")) { define("LOCK_EX", 2); } function file_put_contents($filename, $content, $flags = null, $resource_context = null) { if (is_array($content)) { $content = implode('', $content); } if (!is_scalar($content)) { user_error('file_put_contents() The 2nd parameter should be either a string or an array', E_USER_WARNING); return false; } $length = strlen($content); $mode = ($flags & FILE_APPEND) ? 'a' : 'wb'; $use_inc_path = ($flags & FILE_USE_INCLUDE_PATH) ? true : false; if (($fh = @fopen($filename, $mode, $use_inc_path)) === false) { user_error('file_put_contents() failed to open stream: Permission denied', E_USER_WARNING); return false; } $use_lock = ($flags & LOCK_EX) ? true : false ; if ($use_lock === true) { if (!flock($fh, LOCK_EX)) { return false; } } $bytes = 0; if (($bytes = @fwrite($fh, $content)) === false) { $errormsg = sprintf('file_put_contents() Failed to write %d bytes to %s', $length, $filename); user_error($errormsg, E_USER_WARNING); return false; } @fclose($fh); if ($bytes != $length) { $errormsg = sprintf('file_put_contents() Only %d of %d bytes written to %s, possibly out of free disk space.', $bytes, $length, $filename); user_error($errormsg, E_USER_WARNING); return false; } return $bytes; } } if ( !function_exists('json_decode') || !function_exists('json_encode') || version_compare(PHP_VERSION,"5.4.10","<=") && version_compare(PHP_VERSION,"5.4.0",">=") || version_compare(PHP_VERSION,"5.3.13","<=") && version_compare(PHP_VERSION,"5.3.0",">=") || version_compare(PHP_VERSION,"5.2.9","<=") && version_compare(PHP_VERSION,"5.2.0",">=") ) { define('SERVICES_JSON_SLICE', 1); define('SERVICES_JSON_IN_STR', 2); define('SERVICES_JSON_IN_ARR', 3); define('SERVICES_JSON_IN_OBJ', 4); define('SERVICES_JSON_IN_CMT', 5); define('SERVICES_JSON_LOOSE_TYPE', 16); define('SERVICES_JSON_SUPPRESS_ERRORS', 32); class Services_JSON { function Services_JSON($use = 0) { $this->use = $use; } function utf162utf8($utf16) { if(function_exists('mb_convert_encoding')) { return mb_convert_encoding($utf16, 'UTF-8', 'UTF-16'); } $bytes = (ord($utf16[0]) << 8) | ord($utf16[1]); switch(true) { case ((0x7F & $bytes) == $bytes): return chr(0x7F & $bytes); case (0x07FF & $bytes) == $bytes: return chr(0xC0 | (($bytes >> 6) & 0x1F)) . chr(0x80 | ($bytes & 0x3F)); case (0xFFFF & $bytes) == $bytes: return chr(0xE0 | (($bytes >> 12) & 0x0F)) . chr(0x80 | (($bytes >> 6) & 0x3F)) . chr(0x80 | ($bytes & 0x3F)); } return ''; } function utf82utf16($utf8) { if(function_exists('mb_convert_encoding')) { return mb_convert_encoding($utf8, 'UTF-16', 'UTF-8'); } switch(strlen($utf8)) { case 1: return $utf8; case 2: return chr(0x07 & (ord($utf8[0]) >> 2)) . chr((0xC0 & (ord($utf8[0]) << 6)) | (0x3F & ord($utf8[1]))); case 3: return chr((0xF0 & (ord($utf8[0]) << 4)) | (0x0F & (ord($utf8[1]) >> 2))) . chr((0xC0 & (ord($utf8[1]) << 6)) | (0x7F & ord($utf8[2]))); } return ''; } function encode($var) { switch (gettype($var)) { case 'boolean': return $var ? 'true' : 'false'; case 'NULL': return 'null'; case 'integer': return (int) $var; case 'double': case 'float': return (float) $var; case 'string': $ascii = ''; $strlen_var = strlen($var); for ($c = 0; $c < $strlen_var; ++$c) { $ord_var_c = ord($var[$c]); switch (true) { case $ord_var_c == 0x08: $ascii .= '\b'; break; case $ord_var_c == 0x09: $ascii .= '\t'; break; case $ord_var_c == 0x0A: $ascii .= '\n'; break; case $ord_var_c == 0x0C: $ascii .= '\f'; break; case $ord_var_c == 0x0D: $ascii .= '\r'; break; case $ord_var_c == 0x22: case $ord_var_c == 0x2F: case $ord_var_c == 0x5C: $ascii .= '\\'.$var[$c]; break; case (($ord_var_c >= 0x20) && ($ord_var_c <= 0x7F)): $ascii .= $var[$c]; break; case (($ord_var_c & 0xE0) == 0xC0): $char = pack('C*', $ord_var_c, ord($var[$c + 1])); $c += 1; $utf16 = $this->utf82utf16($char); $ascii .= sprintf('\u%04s', bin2hex($utf16)); break; case (($ord_var_c & 0xF0) == 0xE0): $char = pack('C*', $ord_var_c, ord($var[$c + 1]), ord($var[$c + 2])); $c += 2; $utf16 = $this->utf82utf16($char); $ascii .= sprintf('\u%04s', bin2hex($utf16)); break; case (($ord_var_c & 0xF8) == 0xF0): $char = pack('C*', $ord_var_c, ord($var[$c + 1]), ord($var[$c + 2]), ord($var[$c + 3])); $c += 3; $utf16 = $this->utf82utf16($char); $ascii .= sprintf('\u%04s', bin2hex($utf16)); break; case (($ord_var_c & 0xFC) == 0xF8): $char = pack('C*', $ord_var_c, ord($var[$c + 1]), ord($var[$c + 2]), ord($var[$c + 3]), ord($var[$c + 4])); $c += 4; $utf16 = $this->utf82utf16($char); $ascii .= sprintf('\u%04s', bin2hex($utf16)); break; case (($ord_var_c & 0xFE) == 0xFC): $char = pack('C*', $ord_var_c, ord($var[$c + 1]), ord($var[$c + 2]), ord($var[$c + 3]), ord($var[$c + 4]), ord($var[$c + 5])); $c += 5; $utf16 = $this->utf82utf16($char); $ascii .= sprintf('\u%04s', bin2hex($utf16)); break; } } return '"'.$ascii.'"'; case 'array': if (is_array($var) && count($var) && (array_keys($var) !== range(0, sizeof($var) - 1))) { $properties = array_map(array($this, 'name_value'), array_keys($var), array_values($var)); foreach($properties as $property) { if(Services_JSON::isError($property)) { return $property; } } return '{' . join(',', $properties) . '}'; } $elements = array_map(array($this, 'encode'), $var); foreach($elements as $element) { if(Services_JSON::isError($element)) { return $element; } } return '[' . join(',', $elements) . ']'; case 'object': $vars = get_object_vars($var); $properties = array_map(array($this, 'name_value'), array_keys($vars), array_values($vars)); foreach($properties as $property) { if(Services_JSON::isError($property)) { return $property; } } return '{' . join(',', $properties) . '}'; default: return ($this->use & SERVICES_JSON_SUPPRESS_ERRORS) ? 'null' : new Services_JSON_Error(gettype($var)." can not be encoded as JSON string"); } } function name_value($name, $value) { $encoded_value = $this->encode($value); if(Services_JSON::isError($encoded_value)) { return $encoded_value; } return $this->encode(strval($name)) . ':' . $encoded_value; } function reduce_string($str) { $str = preg_replace(array( '#^\s*//(.+)$#m', '#^\s*/\*(.+)\*/#Us', '#/\*(.+)\*/\s*$#Us' ), '', $str); return trim($str); } function decode($str) { $str = $this->reduce_string($str); switch (strtolower($str)) { case 'true': return true; case 'false': return false; case 'null': return null; default: $m = array(); if (is_numeric($str)) { return ((float)$str == (integer)$str) ? (integer)$str : (float)$str; } elseif (preg_match('/^("|\').*(\1)$/s', $str, $m) && $m[1] == $m[2]) { $delim = substr($str, 0, 1); $chrs = substr($str, 1, -1); $utf8 = ''; $strlen_chrs = strlen($chrs); for ($c = 0; $c < $strlen_chrs; ++$c) { $substr_chrs_c_2 = substr($chrs, $c, 2); $ord_chrs_c = ord($chrs[$c]); switch (true) { case $substr_chrs_c_2 == '\b': $utf8 .= chr(0x08); ++$c; break; case $substr_chrs_c_2 == '\t': $utf8 .= chr(0x09); ++$c; break; case $substr_chrs_c_2 == '\n': $utf8 .= chr(0x0A); ++$c; break; case $substr_chrs_c_2 == '\f': $utf8 .= chr(0x0C); ++$c; break; case $substr_chrs_c_2 == '\r': $utf8 .= chr(0x0D); ++$c; break; case $substr_chrs_c_2 == '\\"': case $substr_chrs_c_2 == '\\\'': case $substr_chrs_c_2 == '\\\\': case $substr_chrs_c_2 == '\\/': if (($delim == '"' && $substr_chrs_c_2 != '\\\'') || ($delim == "'" && $substr_chrs_c_2 != '\\"')) { $utf8 .= $chrs[++$c]; } break; case preg_match('/\\\u[0-9A-F]{4}/i', substr($chrs, $c, 6)): $utf16 = chr(hexdec(substr($chrs, ($c + 2), 2))) . chr(hexdec(substr($chrs, ($c + 4), 2))); $utf8 .= $this->utf162utf8($utf16); $c += 5; break; case ($ord_chrs_c >= 0x20) && ($ord_chrs_c <= 0x7F): $utf8 .= $chrs[$c]; break; case ($ord_chrs_c & 0xE0) == 0xC0: $utf8 .= substr($chrs, $c, 2); ++$c; break; case ($ord_chrs_c & 0xF0) == 0xE0: $utf8 .= substr($chrs, $c, 3); $c += 2; break; case ($ord_chrs_c & 0xF8) == 0xF0: $utf8 .= substr($chrs, $c, 4); $c += 3; break; case ($ord_chrs_c & 0xFC) == 0xF8: $utf8 .= substr($chrs, $c, 5); $c += 4; break; case ($ord_chrs_c & 0xFE) == 0xFC: $utf8 .= substr($chrs, $c, 6); $c += 5; break; } } return $utf8; } elseif (preg_match('/^\[.*\]$/s', $str) || preg_match('/^\{.*\}$/s', $str)) { if ($str[0] == '[') { $stk = array(SERVICES_JSON_IN_ARR); $arr = array(); } else { if ($this->use & SERVICES_JSON_LOOSE_TYPE) { $stk = array(SERVICES_JSON_IN_OBJ); $obj = array(); } else { $stk = array(SERVICES_JSON_IN_OBJ); $obj = new stdClass(); } } array_push($stk, array('what' => SERVICES_JSON_SLICE, 'where' => 0, 'delim' => false)); $chrs = substr($str, 1, -1); $chrs = $this->reduce_string($chrs); if ($chrs == '') { if (reset($stk) == SERVICES_JSON_IN_ARR) { return $arr; } else { return $obj; } } $strlen_chrs = strlen($chrs); for ($c = 0; $c <= $strlen_chrs; ++$c) { $top = end($stk); $substr_chrs_c_2 = substr($chrs, $c, 2); if (($c == $strlen_chrs) || (($chrs[$c] == ',') && ($top['what'] == SERVICES_JSON_SLICE))) { $slice = substr($chrs, $top['where'], ($c - $top['where'])); array_push($stk, array('what' => SERVICES_JSON_SLICE, 'where' => ($c + 1), 'delim' => false)); if (reset($stk) == SERVICES_JSON_IN_ARR) { array_push($arr, $this->decode($slice)); } elseif (reset($stk) == SERVICES_JSON_IN_OBJ) { $parts = array(); if (preg_match('/^\s*(["\'].*[^\\\]["\'])\s*:\s*(\S.*),?$/Uis', $slice, $parts)) { $key = $this->decode($parts[1]); $val = $this->decode($parts[2]); if ($this->use & SERVICES_JSON_LOOSE_TYPE) { $obj[$key] = $val; } else { $obj->$key = $val; } } elseif (preg_match('/^\s*(\w+)\s*:\s*(\S.*),?$/Uis', $slice, $parts)) { $key = $parts[1]; $val = $this->decode($parts[2]); if ($this->use & SERVICES_JSON_LOOSE_TYPE) { $obj[$key] = $val; } else { $obj->$key = $val; } } } } elseif ((($chrs[$c] == '"') || ($chrs[$c] == "'")) && ($top['what'] != SERVICES_JSON_IN_STR)) { array_push($stk, array('what' => SERVICES_JSON_IN_STR, 'where' => $c, 'delim' => $chrs[$c])); } elseif (($chrs[$c] == $top['delim']) && ($top['what'] == SERVICES_JSON_IN_STR) && ((strlen(substr($chrs, 0, $c)) - strlen(rtrim(substr($chrs, 0, $c), '\\'))) % 2 != 1)) { array_pop($stk); } elseif (($chrs[$c] == '[') && in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) { array_push($stk, array('what' => SERVICES_JSON_IN_ARR, 'where' => $c, 'delim' => false)); } elseif (($chrs[$c] == ']') && ($top['what'] == SERVICES_JSON_IN_ARR)) { array_pop($stk); } elseif (($chrs[$c] == '{') && in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) { array_push($stk, array('what' => SERVICES_JSON_IN_OBJ, 'where' => $c, 'delim' => false)); } elseif (($chrs[$c] == '}') && ($top['what'] == SERVICES_JSON_IN_OBJ)) { array_pop($stk); } elseif (($substr_chrs_c_2 == '/*') && in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) { array_push($stk, array('what' => SERVICES_JSON_IN_CMT, 'where' => $c, 'delim' => false)); $c++; } elseif (($substr_chrs_c_2 == '*/') && ($top['what'] == SERVICES_JSON_IN_CMT)) { array_pop($stk); $c++; for ($i = $top['where']; $i <= $c; ++$i) $chrs = substr_replace($chrs, ' ', $i, 1); } } if (reset($stk) == SERVICES_JSON_IN_ARR) { return $arr; } elseif (reset($stk) == SERVICES_JSON_IN_OBJ) { return $obj; } } } } function isError($data, $code = null) { if (class_exists('pear')) { return PEAR::isError($data, $code); } elseif (is_object($data) && (get_class($data) == 'services_json_error' || is_subclass_of($data, 'services_json_error'))) { return true; } return false; } } $GLOBALS['it_json'] = new Services_JSON(SERVICES_JSON_LOOSE_TYPE|SERVICES_JSON_SUPPRESS_ERRORS); if (!function_exists('json_decode')) { function json_decode($json, $assoc = true, $depth = 512, $options = 0) { return $GLOBALS['it_json']->decode($json); } } if (!function_exists('json_encode')) { function json_encode($value, $options = 0) { return $GLOBALS['it_json']->encode($value); } } } else { $GLOBALS['it_json'] = null; } 
class iDB { /* public */var $query_id, $connection_id, $record_row, $version; /* public */var $errstr = ""; /* public */var $errnum; /* public */var $isSqlite = false; /* protected */var $host, $database, $username, $password; /* protected */var $tokenize_serializableReplacementTokenIndex, $tokenize_hasSerializableReplacementTokens; /* public static */function getInstance($d) { switch ($d) { case "mysql":return new iDB_MySQL(); case "mssql":return new iDB_MSSQL(); case "pgsql":return new iDB_PGSQL(); case "sqlite":return new iDB_SQLite(); } } /* public */function like_escape($s, $e) { return str_replace(array($e, '_', '%'), array($e.$e, $e.'_', $e.'%'), $s); } /* public */function ident_escape($s) { return str_replace('`', '``', $s); } /* public */function value_escape($s) { if ( $s === null ) { return "NULL"; } else if ( $s === true ) { return "TRUE"; } else if ( $s === false ) { return "FALSE"; } else if ( is_string($s) || ctype_digit($s) ) { return "'".$this->escape($s)."'"; } else if (is_array($s)) { return "NULL"; } return $s; } /* public */function escape($d) { return strtr($d, array( '\\' => '\\\\', "\0" => '\\0', "\n" => '\\n', "\r" => '\\r', "'" => "\\'", '"' => '\\"', "\x1a" => '\\Z' )); } /* public */function unescape($d) { return strtr($d, array( '\\\\' => '\\', '\\0' => "\0", '\\n' => "\n", '\\r' => "\r", "\\'" => "'", '\\"' => '"', '\\Z' => "\x1a" )); } /* public */function sqliteClose() { if ($this->isSqlite) { $this->close(); } } /* public */function getTableList($details = null) { $r = array(); if ($this->rawquery("SHOW TABLE STATUS")) { while ( $row = $this->fetchRow() ) { if ($details) { $r[] = $row; } else { $r[] = $row["Name"]; } } } return $r; } /* public */function isTable($table) { if ($this->rawquery("SELECT 1 FROM '$table' LIMIT 0")) { return true; } return false; } /* public */function multiquery($multiQuerySet) { $resultSet = array(); foreach ( $multiQuerySet as $i => $multiQuery ) { $r = $this->query($multiQuery[0], $multiQuery[1], $multiQuery[2]); if ( $r !== false ) { $resultSet[ $i ] = $r; } } return $resultSet; } /* public */function query($q, $vars = null, $select = null, $opts = array()) { $q = trim($q); if (is_array($vars)) { $numvar = substr_count($q, "?"); $lastvar = count($vars)-1; while ( $numvar > count($vars) ) { $vars[] = $vars[$lastvar]; } $offset = 0; foreach ( $vars as $c => $r ) { $r = $this->value_escape($r); if (( $i = strpos($q, "?", $offset) )!== false ) { $q = substr_replace($q, $r, $i, 1); $offset = $i+strlen($r); } } } $qid = $this->rawquery($q, $opts); if ( $select === null ) { return $qid; } else if ( stripos($q, "SELECT") === 0 || stripos($q, "DESCRIBE") === 0 || stripos($q, "SHOW") === 0 || stripos($q, "PRAGMA") === 0 && strpos($q, "=") === false ) { if (( $r = $this->fetchRow($qid) )!== null ) { if ( $select === false ) { $this->finalize($qid); return $r; } $result = array($r); } else { $this->finalize($qid); return false; } if ( $select !== true && isset($result[0][$select]) ) { $this->finalize($qid); return $result[0][$select]; } while (( $r = $this->fetchRow($qid) )!== null ) { $result[] = $r; } $this->finalize($qid); return $result; } else if ( stripos($q,"INSERT INTO") === 0 ) { if ( $select === true ) { return $this->insertId(); } return $qid; } return $qid; } /* public */function insertupdate($table, $vars, $index) { $var_values = array(); if ($this->isSqlite) { $q = "INSERT OR IGNORE INTO"; } else { $q = "INSERT INTO"; } $q .= " `".$this->ident_escape($table)."` ("; $q_values = $comma = ""; foreach ( $vars as $key => $value ) { $q .= $comma."`".$this->ident_escape($key)."`"; $q_values .= $comma."?"; $var_values[] = $value; if ( $comma === "" ) { $comma = ","; } } $q .= ") VALUES (".$q_values.")"; if ($this->isSqlite) { $this->query($q, $var_values); $var_values = array(); $q = "UPDATE `".$this->ident_escape($table)."` SET "; } else { $q .= " ON DUPLICATE KEY UPDATE "; } $comma = ""; foreach ( $vars as $key => $value ) { if ( $key === $index || $table === "i_users" && $key === "path_remote" && $value === "unknown://localhost" || $table === "i_users" && $key === "node" ) { continue; } $q .= $comma."`".$this->ident_escape($key)."`=?"; $var_values[] = $value; if ( $comma === "" ) { $comma = ","; } } if ($this->isSqlite) { $q .= " WHERE `".$this->ident_escape($index)."`=?"; $var_values[] = $vars[$index]; } return $this->query($q, $var_values); } /* public */function exportFile($f, $includeTables = null, $skipDataTables = null) { $returnResult = true; $preserveError = false; $tables = $this->getTableList(); $post = ""; if (( $seektable = @file_get_contents($f.".progress") )!== false && $seektable !== "" ) { if ( $seektable === "~" ) { return true; } $fp = fopen($f,"r+b"); if ( $fp === false ) return false; flock($fp, LOCK_EX); list($seekpos, $seekrow, $seektable) = explode(" ",$seektable,3); ftruncate($fp, $seekpos); fseek($fp, $seekpos); $isFirstTable = false; } else { $fp = fopen($f,"wb"); if ( $fp === false ) return false; $seektable = $seekrow = $seekpos = null; $isFirstTable = true; fwrite($fp, "SET AUTOCOMMIT = 0;\n"); fwrite($fp, "START TRANSACTION;\n"); } $seekrow = $seekrow === null ? 0 : intval($seekrow); $timeStart = file_exists($f.".progress") ? $_SERVER["REQUEST_TIME"] : null; if ( $skipDataTables === null ) { $skipDataTables = array(); } $hasTransaction = false; $i = 0; while (isset($tables[$i])) { if ( $includeTables !== null && !in_array($tables[$i],$includeTables) ) { ++$i; continue; } $this->rawquery("SET SQL_QUOTE_SHOW_CREATE = 1"); $this->rawquery("SHOW CREATE TABLE `".$tables[$i]."`"); $r = $this->fetchRowNatural(); $r = $r[1]; $isInnoDB = strpos($r, "ENGINE=InnoDB") !== false; if ( $isInnoDB && $isFirstTable ) { $isFirstTable = false; $hasTransaction = true; $this->rawquery("SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ"); $this->rawquery("START TRANSACTION /*!40100 WITH CONSISTENT SNAPSHOT */"); $this->rawquery("UNLOCK TABLES"); $this->rawquery("SAVEPOINT itron"); $this->rawquery("SET SQL_QUOTE_SHOW_CREATE = 1"); $this->rawquery("SHOW CREATE TABLE `".$tables[$i]."`"); $r = $this->fetchRowNatural(); $r = $r[1]; } if ( strpos($r, "CREATE ALGORITHM") === 0 ) { $r = preg_replace("/CREATE ALGORITHM[^;]*VIEW `/", "CREATE VIEW `", $r); $post .= "DROP VIEW IF EXISTS `".$tables[$i]."`;\n"; $post .= $r.";\n"; ++$i;continue; } else if ( strpos($r, "CREATE VIEW") === 0 ) { $post .= "DROP VIEW IF EXISTS `".$tables[$i]."`;\n"; $post .= $r.";\n"; ++$i;continue; } $currentPost = ""; preg_match_all("#[\n\r]\s*CONSTRAINT\s+`[^`]+`\s+FOREIGN KEY.+#",$r,$m); foreach ( $m[0] as $j ) { $r = str_replace($j, "", $r); $currentPost .= " ADD ".trim($j); } $r = preg_replace("#,(\s*[\n\r]+\s*\))#", "$1", $r); if ( $currentPost !== "" ) { $post .= "ALTER TABLE `".$tables[$i]."`"; $post .= $currentPost; $post .= ";\n"; } if ( $seektable !== null ) { if ( $tables[$i] !== $seektable ) { ++$i; continue; } $seektable = null; } fwrite($fp, "DROP TABLE IF EXISTS `".$tables[$i]."`;\n"); fwrite($fp, $r); if ( in_array($tables[$i], $skipDataTables) ) { fwrite($fp, ";\n"); if ($hasTransaction) { $this->rawquery("ROLLBACK TO SAVEPOINT itron"); } ++$i; continue; } $this->rawquery("SHOW COLUMNS FROM `".$tables[$i]."`"); $colsType = array(); $querySelectColumn = ""; while ( $r = $this->fetchRow() ) { $cType = $r["Type"]; $cName = $r["Field"]; if ( $querySelectColumn !== "" ) { $querySelectColumn .= ","; } if ( strpos($cType,"binary") !== false ) { $querySelectColumn .= "HEX(`$cName`) `$cName`"; } else { $querySelectColumn .= "`$cName`"; } if ( strpos($cType,"char") !== false || strpos($cType,"date") !== false || strpos($cType,"time") !== false || strpos($cType,"text") !== false || strpos($cType,"enum") !== false || strpos($cType,"set") !== false ) { $colsType[] = 1; } else if ( strpos($cType,"bit") === 0 ) { $colsType[] = 2; } else if ( strpos($cType,"binary") !== false ) { $colsType[] = 3; } else if ( strpos($cType,"blob") !== false ) { $colsType[] = 4; } else { $colsType[] = 0; } } $lastCol = count($colsType)-1; $maxrow = 0; $qid = $this->rawquery("SELECT COUNT(*) FROM `".$tables[$i]."`"); if ( $qid === false && $hasTransaction && $this->errnum === 1412 ) { $this->rawquery("ROLLBACK TO SAVEPOINT itron"); if ( stripos($tables[$i], "wfHoover") !== false || stripos($tables[$i], "wfPendingIssues") !== false || stripos($tables[$i], "layered_filter_block") !== false || stripos($tables[$i], "etsy_audit_log") !== false ) { fwrite($fp, ";\n"); $seekrow = 0; ++$i; continue; } else { $this->rawquery("RELEASE SAVEPOINT itron"); $hasTransaction = false; $qid = $this->rawquery("SELECT COUNT(*) FROM `".$tables[$i]."`"); } } if ( $qid === false ) { $returnResult = false; $preserveError = $this->errstr; if ($hasTransaction) { $this->rawquery("ROLLBACK TO SAVEPOINT itron"); } break; } else { $r = $this->fetchRowNatural($qid); $maxrow = intval($r[0]); } while ( $seekrow < $maxrow ) { $seekrow_select = $seekrow; $qid = $this->rawquery("SELECT ".$querySelectColumn." FROM `".$tables[$i]."`".( $timeStart !== null && $maxrow > 25000 ? " LIMIT ".$seekrow.",25000" : "" ),array( "unbuffered" => $timeStart === null )); if ( $qid === false ) { $preserveError = $this->errstr; $qid = $this->rawquery("SELECT ".$querySelectColumn." FROM `".$tables[$i]."`".( $maxrow > 5000 ? " LIMIT ".$seekrow.",5000" : "" )); if ( $qid === false ) { if ($hasTransaction) { $this->rawquery("ROLLBACK TO SAVEPOINT itron"); } $returnResult = false; break 2; } } while ( $r = $this->fetchRowNatural($qid) ) { $nextWriteLength = 0; $nextWrite = ""; do { $nextInsert = ";\nINSERT INTO `".$tables[$i]."` VALUES "; $nextInsertLength = 0; do { $thisInsert =( $nextInsertLength === 0 ? "" : "," )."("; foreach ( $colsType as $j => $cType ) { if ( $r[$j] === null ) { $thisInsert .= "NULL"; } else if ( $r[$j] === "" ) { $thisInsert .= "''"; } else if ( $cType === 1 ) { $thisInsert .= "'"; $thisInsert .= $this->escape($r[$j]); $thisInsert .= "'"; } else if ( $cType === 2 ) { $thisInsert .= "b'".decbin($r[$j])."'"; } else if ( $cType === 3 ) { $thisInsert .= "0x".$r[$j]; } else if ( $cType === 4 ) { if (preg_match('//u',$r[$j])) { $thisInsert .= "'"; $thisInsert .= $this->escape($r[$j]); $thisInsert .= "'"; } else { $thisInsertRow = bin2hex($r[$j]); if ( $thisInsertRow === "" ) { $thisInsert .= "''"; } else { $thisInsert .= "0x".$thisInsertRow; } } } else { $thisInsert .= $r[$j]; } if ( $lastCol !== $j ) { $thisInsert .= ","; } } $thisInsert .= ")"; $nextInsert .= $thisInsert; $nextInsertLength += strlen($thisInsert); ++$seekrow; } while ( $nextInsertLength < 65400 &&( $r = $this->fetchRowNatural($qid) )); $nextWriteLength += $nextInsertLength; $nextWrite .= $nextInsert; } while ( $nextWriteLength < 1000000 &&( $r = $this->fetchRowNatural($qid) )); fwrite($fp, $nextWrite); if ( $timeStart !== null ) { file_put_contents($f.".progress", ftell($fp)." ".$seekrow." ".$tables[$i]); } } if ( $seekrow_select === $seekrow ) { break; } } if ($hasTransaction) { $this->rawquery("ROLLBACK TO SAVEPOINT itron"); } $seekrow = 0; fwrite($fp, ";\n"); ++$i; } fwrite($fp, $post); fwrite($fp, "COMMIT;\n"); fflush($fp); flock($fp, LOCK_UN); fclose($fp); if ($hasTransaction) { $this->rawquery("RELEASE SAVEPOINT itron"); } if ( $timeStart !== null ) { file_put_contents($f.".progress", "~"); } if ( $returnResult === false && $preserveError !== false ) { $this->errstr = $preserveError; } return $returnResult; } /* public */function importFile($f, $includeTables = null, $pregReplace = null) { $func_substr = "substr"; $func_strlen = "strlen"; $func_strpos = "strpos"; $fp = fopen($f,"rb"); if ( $fp === false ) { if (!file_exists($f)) { $this->errstr = "Unable to read `$f': File does not exist."; return false; } $this->errstr = "Unable to read `$f': Permission denied."; return false; } if (( $seekTo = @file_get_contents($f.".progress") )!== false && $seekTo !== "" ) { if ( $seekTo === "~" ) { fclose($fp); return true; } list($seekTo, $seekChar) = explode(" ",$seekTo, 2); fseek($fp, $seekTo); } else { $seekTo = $seekChar = null; } $this->rawquery("SET FOREIGN_KEY_CHECKS=0"); $this->rawquery('SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO"'); $inQuotes = $inComment = $inRemovableComment = $inTable = $isCharEscaped = false; $currentQuery = $buffer = ""; $timeStart = file_exists($f.".progress") ? $_SERVER["REQUEST_TIME"] : null; while (!feof($fp)) { $hasOldBuffer = $buffer !== ""; $buffer = $hasOldBuffer ? $func_substr($buffer,-1) : ""; $buffer .= fread($fp, 65536); $buffer_len = $func_strlen($buffer); if ( $seekChar !== null ) { $i = intval($seekChar); $seekChar = null; } else { $i = $hasOldBuffer ? 1 : 0; } for ( ; $i < $buffer_len; ++$i ) { $c = $func_substr($buffer,$i,1); if ( $inRemovableComment === true ) { if ( $c === "\n" || $c === "\r" ) { $inRemovableComment = false; while ( $i < $buffer_len && ctype_space($buffer[$i]) ) { ++$i; } --$i; } continue; } else if ( $inComment === true ) { if ( $c === "/" && $i !== 0 && $buffer[$i-1] === "*" ) { $inComment = false; } } else if ( $inQuotes !== false ) { if ( $isCharEscaped === true ) { $isCharEscaped = false; } else if ( $c === "\\" ) { $isCharEscaped = true; } else if ( $c === $inQuotes ) { $inQuotes = false; } else { $nextSlash = strpos($buffer, "\\", $i); $nextQuote = strpos($buffer, $inQuotes, $i); if ( $nextSlash !== false && $nextQuote !== false && $nextSlash > $nextQuote || $nextSlash === false && $nextQuote !== false ) { $currentQuery .= substr($buffer, $i, $nextQuote-$i); $i = $nextQuote-1; continue; } else if ( $nextSlash !== false ) { $currentQuery .= substr($buffer, $i, $nextSlash-$i); $i = $nextSlash-1; continue; } else if ( $nextSlash === false && $nextQuote === false ) { $currentQuery .= substr($buffer, $i); $i = $buffer_len; continue 2; } } } else if ( $c === "*" && $i !== 0 && $buffer[$i-1] === "/" ) { $inComment = true; } else if ( $c === "#" || $c === "-" && $i > 0 && $buffer[$i-1] === "-" ) { $inRemovableComment = true; if ( $c === "#" ) { continue; } $currentQuery = substr($currentQuery,0,-1); continue; } else if ( $c === "'" || $c === '"' ) { $inQuotes = $c; } else if ( $c === ";" ) { if ( $includeTables !== null && preg_match("/^\s*(?:DROP|ALTER)\s+(?:TABLE|VIEW)\s+(?:IF\s+EXISTS\s+)?([^\s]+)/",$currentQuery,$m) ) { $inTable = trim($m[1],"`"); } if ( $inTable === false || in_array($inTable,$includeTables) ) { if ( $pregReplace !== null ) { $hasSerializableReplacementKeys = $hasSerializableReplacementValues = array(); foreach ( $pregReplace as $pregPattern => $pregReplacement ) { if ( is_array($pregReplacement) && $pregReplacement[0] === 0 ) { $hasSerializableReplacementKeys[] = $pregPattern; $hasSerializableReplacementValues[] = $pregReplacement[1]; } } if (isset($hasSerializableReplacementKeys[0])) { $currentQuery = $this->tokenize($currentQuery, $hasSerializableReplacementKeys, $hasSerializableReplacementValues); } foreach ( $pregReplace as $pregPattern => $pregReplacement ) { if (is_array($pregReplacement)) { if ( $pregReplacement[0] === 0 ) { $currentQuery = preg_replace($pregPattern, $pregReplacement[1], $currentQuery); } else { $currentQuery = preg_replace_callback($pregPattern, function_exists("create_function") ? create_function($pregReplacement[0], $pregReplacement[1]) : eval("return function(".$pregReplacement[0]."){".$pregReplacement[1]."};"), $currentQuery); } } else { $currentQuery = preg_replace($pregPattern, $pregReplacement, $currentQuery); } } if (isset($hasSerializableReplacementKeys[0])) { $currentQuery = $this->untokenize($currentQuery); } } if ( false === $this->rawquery($currentQuery) ) { } } $currentQuery = ""; while ( 1+$i < $buffer_len && ctype_space($buffer[1+$i]) ) { ++$i; } if ( $timeStart !== null && time()-$timeStart > 26 ) { file_put_contents($f.".progress", (ftell($fp)-65536)." ".$i); return true; } continue; } $currentQuery .= $c; } } fclose($fp); if ( $timeStart !== null ) { file_put_contents($f.".progress", "~"); } return true; } /* public */function sr($tableList, $pregExp) { $countQueries = 0; $sqlizedPregExpSubject = array(); foreach ( $pregExp as $subject => $replacement ) { $pos = strrpos($subject, $subject[0]); if ( $pos === false || $pos === 0 ) { continue; } $sqlizedPregExpSubject[] = $this->escape(substr($subject, 1, $pos-1)); } foreach ( $tableList as $table ) { $tableInfo = $this->query("DESCRIBE `$table`", null, true); $listPrimaryKeys = $listTextColumns = array(); foreach ( $tableInfo as $columnInfo ) { if ( "PRI" === $columnInfo["Key"] ) { $listPrimaryKeys[] = $columnInfo["Field"]; } if ( strpos($columnInfo["Type"], "text") !== false || strpos($columnInfo["Type"], "varchar") !== false ) { $listTextColumns[] = $columnInfo["Field"]; } } if (empty($listPrimaryKeys)) { continue; } foreach ( $listTextColumns as $col ) { $limit = 1000; $offset = 0; do { $sth = $this->rawquery("SELECT `".implode("`,`", $listPrimaryKeys)."`, `$col` FROM `$table` WHERE `$col` REGEXP '".implode("' OR `$col` REGEXP '", $sqlizedPregExpSubject)."' ORDER BY `".implode("`,`", $listPrimaryKeys)."` LIMIT $limit OFFSET $offset"); $hasActivity = false; $queryStack = array(); while (( $row = $this->fetchRow($sth) )!== null ) { if ( $hasActivity === false ) { $hasActivity = true; } if ( $row[$col] === "" ) { continue; } $r = $row[$col]; if (isset($GLOBALS["it_debug"])) _it_debug("SEARCH: $r"); $hasSerializableReplacementKeys = $hasSerializableReplacementValues = array(); foreach ( $pregExp as $pregPattern => $pregReplacement ) { if ( is_array($pregReplacement) && $pregReplacement[0] === 0 ) { $hasSerializableReplacementKeys[] = $pregPattern; $hasSerializableReplacementValues[] = $pregReplacement[1]; } } if (isset($hasSerializableReplacementKeys[0])) { $r = $this->tokenize($r, $hasSerializableReplacementKeys, $hasSerializableReplacementValues); } foreach ( $pregExp as $pregPattern => $pregReplacement ) { if (is_array($pregReplacement)) { if ( $pregReplacement[0] === 0 ) { $r = preg_replace($pregPattern, $pregReplacement[1], $r); } else { $r = preg_replace_callback($pregPattern, function_exists("create_function") ? create_function($pregReplacement[0], $pregReplacement[1]) : eval("return function(".$pregReplacement[0]."){".$pregReplacement[1]."};"), $r); } } else { $r = preg_replace($pregPattern, $pregReplacement, $r); } } if (isset($hasSerializableReplacementKeys[0])) { $r = $this->untokenize($r); } if (isset($GLOBALS["it_debug"])) _it_debug("REPLACE: $r"); if ( $r === $row[$col] ) { continue; } $where_condition = ""; foreach ( $listPrimaryKeys as $primaryKey ) { $where_condition .= " AND `$primaryKey`=".$this->value_escape($row[$primaryKey]); } $queryStack[] = "UPDATE `$table` SET `$col`=".$this->value_escape($r)." WHERE ".substr($where_condition, 5); } $this->finalize($sth); if (!$hasActivity) { break; } foreach ( $queryStack as $r ) { $this->rawquery($r); ++$countQueries; } $offset += $limit; } while (true); } } return $countQueries; } /* protected */function tokenize($currentQuery, $hasSerializableReplacementKeys, $hasSerializableReplacementValues) { if ( $this->tokenize_serializableReplacementTokenIndex !== 0 ) { $this->tokenize_serializableReplacementTokenIndex = 0; $this->tokenize_hasSerializableReplacementTokens = array(); } $func_substr = "substr"; $func_strlen = "strlen"; $func_strpos = "strpos"; $preg_i = 0; do { $preg_i = strpos($currentQuery, "s:", $preg_i); if ( $preg_i === false ) { break; } if (preg_match('/\Gs:(\d+):(\\\\?")/', $currentQuery, $pregMatches, null, $preg_i)) { $pregOffset = $preg_i+strlen($pregMatches[0]); $pregLength = $pregMatches[1]; $pregIsEscaped = $pregMatches[2] !== '"'; if ( $pregLength < 10 ) { $preg_i = $pregOffset+$pregLength+$func_strlen($pregMatches[2])+1; continue; } $pregContent = substr($currentQuery, $pregOffset,( $pregIsEscaped ? 2 : 1 )*$pregLength); if ($pregIsEscaped) { $pregContent = $this->unescape($pregContent); $pregContent = substr($pregContent, 0, $pregLength); } if ( $pregContent === 'last_modified' ) { $preg_i = $pregOffset+$pregLength+$func_strlen($pregMatches[2])+1; continue; } $pregCount = 0; $pregNewContent = preg_replace($hasSerializableReplacementKeys, $hasSerializableReplacementValues, $pregContent, -1, $pregCount); if ( $pregCount === 0 ) { $preg_i = $pregOffset+$pregLength+$func_strlen($pregMatches[2])+1; continue; } $pregSrc = "s:".$pregMatches[1].":".$pregMatches[2].( $pregIsEscaped ? $this->escape($pregContent) : $pregContent ).$pregMatches[2].";"; $pregRep = "s:".strlen($pregNewContent).":".$pregMatches[2].( $pregIsEscaped ? $this->escape($pregNewContent) : $pregNewContent ).$pregMatches[2].";"; $this->tokenize_hasSerializableReplacementTokens[$this->tokenize_serializableReplacementTokenIndex] = $pregRep; $pregToken = "||ITRON-TOKEN-987654321-".$this->tokenize_serializableReplacementTokenIndex."||"; $currentQuery = substr_replace($currentQuery, $pregToken, $preg_i, strlen($pregSrc)); $preg_i += $func_strlen($pregToken); ++$this->tokenize_serializableReplacementTokenIndex; continue; } else { ++$preg_i; } } while (true); return $currentQuery; } /* protected */function untokenize($currentQuery) { if ( $this->tokenize_serializableReplacementTokenIndex !== 0 ) { foreach ( $this->tokenize_hasSerializableReplacementTokens as $serializableReplacementTokenIndex => $pregRep ) { $currentQuery = str_replace("||ITRON-TOKEN-987654321-$serializableReplacementTokenIndex||", $pregRep, $currentQuery); } $this->tokenize_serializableReplacementTokenIndex = 0; $this->tokenize_hasSerializableReplacementTokens = array(); } return $currentQuery; } } 
class iDB_MySQL extends iDB { /* public */var $apiMode; /* public */var $timeNextPingPong; /* public */var $format; /* public */var $hasLargePrefix; /* public */var $requiredGrants; /* public */var $triggerGrantError; /* public */var $hasMissingGrants; /* public */function connect($host, $username, $password, $database = null) { $this->host = $host; $this->username = $username; $this->password = $password; $this->database = null; $this->triggerGrantError = $this->triggerGrantError === null ? true : $this->triggerGrantError; $this->requiredGrants = $this->requiredGrants === null ? array("SELECT", "UPDATE", "INSERT", "CREATE", "ALTER") : $this->requiredGrants; if ( !extension_loaded("mysql") && extension_loaded("mysqli") && class_exists("mysqli") ) { $this->apiMode = 1; } else { $this->apiMode = 0; } if ( $this->apiMode === 1 ) { if (version_compare(PHP_VERSION, "8.1.0", ">=")) { mysqli_report(MYSQLI_REPORT_OFF); } $effport = null; if ( strpos($this->host, ":") !== false ) { list($effhost, $effport) = explode(":", $this->host, 2); if (empty($effport)) { $effport = null; } } else { $effhost = $this->host; } if ( $database === null ) { if ( $effport === null ) { $this->connection_id = new mysqli($effhost,$this->username,$this->password); } else { $this->connection_id = new mysqli($effhost,$this->username,$this->password,"",$effport); } } else { if ( $effport === null ) { $this->connection_id = new mysqli($effhost,$this->username,$this->password,$database); } else { $this->connection_id = new mysqli($effhost,$this->username,$this->password,$database,$effport); } $this->database = $database; } if ( $this->connection_id->connect_errno === 2002 && trim(ini_get("mysqli.default_socket")) === "" && file_exists("/var/lib/mysql/mysql.sock") ) { if (isset($GLOBALS["it_debug"])) _it_debug("`mysqli.default_socket` is empty, trying with: /var/lib/mysql/mysql.sock"); ini_set("mysqli.default_socket", "/var/lib/mysql/mysql.sock"); ini_set("pdo_mysql.default_socket", "/var/lib/mysql/mysql.sock"); return $this->connect($host, $username, $password, $database); } if ( $this->connection_id->connect_errno === 1049 ) { $this->errstr = "i1049 Unknown database: The database '".$this->database."' does not exist.\n\nSee <a href='https://installatron.com/docs/admin/troubleshooting#i1049' target='_blank' class='i_link'>Installatron Troubleshooting: i1049</a> for more information."; return false; } if ( $this->connection_id->connect_errno === 1045 ) { $this->errstr = "i1045 Access denied: The database username and password could not be authenticated.\n\nSee <a href='https://installatron.com/docs/admin/troubleshooting#i1045' target='_blank' class='i_link'>Installatron Troubleshooting: i1045</a> for more information."; return false; } if ( $this->connection_id->connect_errno === 1044 ) { $this->errstr = "i1044 Insufficient permissions: ".$this->connection_id->connect_error."\n\nSee <a href='https://installatron.com/docs/admin/troubleshooting#i1044' target='_blank' class='i_link'>Installatron Troubleshooting: i1044</a> for more information."; return false; } if ( $this->connection_id->connect_errno ) { $this->errstr = "Could not connect to `$this->host` using the username `$this->username` and password **HIDDEN** (mysqli) -- [".$this->connection_id->connect_errno."] ".$this->connection_id->connect_error; return false; } $this->version = $this->connection_id->server_info; if (method_exists($this->connection_id,"set_charset")) { $this->connection_id->set_charset("utf8mb4"); } $this->connection_id->query("SET NAMES utf8mb4"); $this->connection_id->query("SET SESSION wait_timeout=28800"); } else { $this->connection_id = @mysql_connect($this->host,$this->username,$this->password); if (!$this->connection_id) { $this->errstr = "Could not connect to `$this->host` using the username `$this->username` and password **HIDDEN** (mysql) -- [".mysql_errno()."] ".mysql_error(); return false; } $this->version = mysql_get_server_info(); if (function_exists("mysql_set_charset")) { mysql_set_charset("utf8mb4",$this->connection_id); } mysql_query("SET NAMES utf8mb4", $this->connection_id); mysql_query("SET SESSION wait_timeout=28800", $this->connection_id); } if ( strpos($this->version,"-log") !== false ) { $this->version = preg_replace("/-log$/", "", $this->version); } if ( $this->database === null && $database !== null ) { if (!$this->selectDb($database)) { return false; } } if (isset($GLOBALS["it_debug"])) _it_debug(addcslashes("iDB_MySQL[$this->apiMode]: ".$this->username."@".$this->host." CONNECTED","\n\r")); $this->timeNextPingPong = 9+time(); $grantsList = $this->query("SHOW GRANTS", null, true, array( "allow_recon" => false )); $this->hasMissingGrants = true; $missingGrantsList = array("ALL"); if ( count($grantsList) > 0 && count($this->requiredGrants) > 0 ) { foreach ( $grantsList as $grantRow ) { $grantRow = current($grantRow); if (( $p = strpos($grantRow, " ON `$this->database`.") )!== false ||( $p = strpos($grantRow, " ON `".str_replace("_", "\\_", $this->database)."`.") )!== false ||( $p = strpos($grantRow, " ON \"$this->database\".") )!== false ||( $p = strpos($grantRow, " ON \"".str_replace("_", "\\_", $this->database)."\".") )!== false ||( $p = strpos($grantRow, " ON '$this->database'.") )!== false ||( $p = strpos($grantRow, " ON '".str_replace("_", "\\_", $this->database)."'.") )!== false ||( $p = strpos($grantRow, " ON *.") )!== false ) { $listGrantRow = substr($grantRow, 6, $p-6).","; if ( $listGrantRow === "USAGE," ) { $this->hasMissingGrants = false; continue; } if ( strpos($listGrantRow, "ALL PRIVILEGES,") !== false ) { $this->hasMissingGrants = false; break; } $missingGrantsList = array(); foreach ( $this->requiredGrants as $requiredGrant ) { if ( strpos($listGrantRow, $requiredGrant.",") === false ) { $missingGrantsList[] = $requiredGrant; } } if (isset($missingGrantsList[0])) { $this->hasMissingGrants = true; } else { $this->hasMissingGrants = false; break; } } } if ($this->hasMissingGrants) { if (isset($GLOBALS["it_debug"])) _it_debug(addcslashes("iDB_MySQL[$this->apiMode]: SHOW GRANTS -> ".var_export($grantsList,true),"\n\r")); if ($this->triggerGrantError) { $this->errstr = "Insufficient permissions: The database user '$this->username' does not have permission to access database '$this->database' (".join(", ",$missingGrantsList)." grants missing).\n\nSee <a href='https://installatron.com/docs/admin/troubleshooting#i1049' target='_blank' class='i_link'>Installatron Troubleshooting: i1049</a> for more information."; return false; } } } if ( isset($GLOBALS["iDB_MySQL_checkFileFormat"]) ) { $this->format = "Antelope" === $this->query("SHOW VARIABLES LIKE 'innodb_file_format'", null, "Value",array( "allow_recon" => false )) ? "antelope" : "barracuda"; } if ( isset($GLOBALS["iDB_MySQL_checkLargePrefix"]) ) { $this->hasLargePrefix = "OFF" !== $this->query("SHOW VARIABLES LIKE 'innodb_large_prefix'", null, "Value",array( "allow_recon" => false )); } return true; } /* protected */function appendMySqlError() { if ( isset($this->connection_id) ) { $this->errstr .= "\n\nTechnical Error: " .( $this->apiMode === 1 ? $this->connection_id->errno." ".$this->connection_id->error : @mysql_errno($this->connection_id)." ".@mysql_error($this->connection_id) ); } } /* public */function selectDb($database) { if (!$this->connection_id) { $this->errstr .= "No connection."; return false; } $this->database = $database; if ( $this->apiMode === 1 ) { $r = $this->connection_id->select_db($this->database); } else { $r = mysql_select_db($this->database,$this->connection_id); } if ($r) { return true; } $this->errstr = "i1049 Unknown database: The database '".$this->database."' does not exist.\n\nSee <a href='https://installatron.com/docs/admin/troubleshooting#i1049' target='_blank'>Installatron Troubleshooting: i1049</a> for more information."; $this->appendMySqlError(); return false; } /* public */function finalize($qid = null) { if ( $qid === null ) { $qid = $this->query_id; } if ( $qid === null || $qid === false ) { return null; } if ( $this->apiMode === 1 ) { mysqli_free_result($qid); $qid = null; while ( mysqli_more_results($this->connection_id) ) { mysqli_next_result($this->connection_id); } return true; } mysql_free_result($qid); $qid = null; return true; } /* public */function affectedRows($qid = null) { if ( $qid === null ) { $qid = $this->query_id; } if ( $qid === null || $qid === false ) { return null; } if ( $this->apiMode === 1 ) { return $this->connection_id->affected_rows; } return mysql_affected_rows($this->connection_id); } /* public */function rawquery($q, $opts = array()) { $opts["allow_recon"] = isset($opts["allow_recon"]) ? $opts["allow_recon"] : true; $opts["unbuffered"] = isset($opts["unbuffered"]) ? $opts["unbuffered"] : false; $timeNow = time(); for ( $i = 0; $i < 3; ++$i ) { if ( !$this->connection_id || $this->apiMode === 1 && $this->timeNextPingPong < $timeNow && method_exists($this->connection_id,"mysql_ping") && !$this->connection_id->mysql_ping() || $this->apiMode === 1 && $this->timeNextPingPong < $timeNow && !method_exists($this->connection_id,"mysql_ping") && false === $this->connection_id->query("/* ping */ SELECT 1") || $this->apiMode === 0 && $this->timeNextPingPong < $timeNow && function_exists("mysql_ping") && !mysql_ping($this->connection_id) || $this->apiMode === 0 && $this->timeNextPingPong < $timeNow && !function_exists("mysql_ping") && false === mysql_query("/* ping */ SELECT 1",$this->connection_id) ) { $this->close(); if ( $i !== 0 ) { sleep(5*$i); } if ($this->connect($this->host, $this->username, $this->password, $this->database)) { break; } } else { break; } } if (!$this->connection_id) { $this->errstr .= $q; $this->errstr .= "\nERROR: No connection."; return false; } $this->timeNextPingPong = 9+$timeNow; if ( strpos($q,"CREATE TABLE ") === 0 && strpos($q,"SELECT * FROM") === false ) { $this->rawquery("SET default_storage_engine = MYISAM"); if ( strpos($q, "TYPE=") !== false ) { $q = preg_replace("/\s*TYPE=(\w+)/"," ENGINE=$1", $q); } if (!preg_match("/ENGINE\s*=.+?(?:CHARSET|CHARACTER SET)/",$q)) { $q .= " CHARSET=utf8"; } } else if ( strpos($q,"DROP TABLE ") === 0 ) { $this->rawquery("SET FOREIGN_KEY_CHECKS = 0"); } $this->errstr = ""; $this->errnum = null; if ( $this->apiMode === 1 ) { if ($opts["unbuffered"]) { $this->query_id = $this->connection_id->query($q, MYSQLI_USE_RESULT); } else { $this->query_id = $this->connection_id->query($q); } } else { if ($opts["unbuffered"]) { $this->query_id = mysql_unbuffered_query($q, $this->connection_id); } else { $this->query_id = mysql_query($q, $this->connection_id); } } if ( false === $this->query_id ) { if ( $this->apiMode === 1 ) { $errno = $this->connection_id->errno; } else { $errno = mysql_errno($this->connection_id); } if ( $errno >= 2000 && $errno < 3000 ) { if ($opts["allow_recon"]) { $this->close(); sleep(2); $opts["allow_recon"] = false; return $this->rawquery($q, $opts); } } $this->appendMySqlError(); if (isset($GLOBALS["it_debug"])) _it_debug(addcslashes("iDB_MySQL[$this->apiMode]: ".$q." -> ".var_export($this->errstr,true),"\n\r")); $this->errstr .= $q; $this->errnum = $errno; return false; } if (isset($GLOBALS["it_debug"])) _it_debug(addcslashes("iDB_MySQL[$this->apiMode]: ".$q." -> SUCCESS","\n\r")); return $this->query_id; } /* public */function insertId() { if ( $this->apiMode === 1 ) { return $this->connection_id->insert_id; } return mysql_insert_id($this->connection_id); } /* public */function fetchRow($qid = null) { if ( $qid === null ) { $qid = $this->query_id; } if ( $qid === null || $qid === false ) { return null; } if ( $this->apiMode === 1 ) { $this->record_row = $qid->fetch_assoc(); } else { $this->record_row = mysql_fetch_array($qid,MYSQL_ASSOC); if ( $this->record_row === false ) { $this->record_row = null; } } return $this->record_row; } /* public */function fetchRowNatural($qid = null) { if ( $qid === null ) { $qid = $this->query_id; } if ( $qid === null || $qid === false ) { return null; } if ( $this->apiMode === 1 ) { $this->record_row = $qid->fetch_row(); } else { $this->record_row = mysql_fetch_array($qid); if ( $this->record_row === false ) { $this->record_row = null; } } return $this->record_row; } /* public */function close() { if (!$this->connection_id) { return false; } if ( $this->apiMode === 1 ) { $this->connection_id->close(); $this->connection_id = null; return true; } mysql_close($this->connection_id); $this->connection_id = null; return true; } /* public */function escape($s) { if (!$this->connection_id) { return iDB::escape($s); } if ( $this->apiMode === 1 ) { return $this->connection_id->real_escape_string($s); } return mysql_real_escape_string($s, $this->connection_id); } } $in=isset($_SERVER["IT_REMOTE_PAYLOAD"]) ? unserialize($_SERVER["IT_REMOTE_PAYLOAD"]) : array();
if ( "0314ec37d6d0b1fceb177d35008a9ea3" !== $in["hash"] )
{
	$GLOBALS["__i_client_error_stack"][] = "Invalid request '".$in["hash"]."': ".'$in='.var_export($in,true);
	echo '__CLIENT__RESPONCE__START__'.serialize(array(false,null,null,$GLOBALS["__i_client_error_stack"]))."__CLIENT__RESPONCE__END__";
	exit;
}




/* iDB::getInstance */

$db = new iDB_MySQL();
if ( !$db->connect('db5010843207.hosting-data.io',
                   'dbu3019602',
                   'CDs9OUOTK66YcVNQ',
                   'dbs9171946') )
{
	if ( $db->errstr !== "" )
	{
		$GLOBALS["__i_client_error_stack"][] = $db->errstr;
	}
	echo '__CLIENT__RESPONCE__START__'.serialize(array(false,null,null,null,$GLOBALS["__i_client_error_stack"]))."__CLIENT__RESPONCE__END__";
}
else if ( $in["meth"] !== "" )
{
	$r = call_user_func_array(
		array($db,$in["meth"]),
		unserialize(base64_decode($in["args"]))
	);
	if ( $db->errstr !== "" )
	{
		$GLOBALS["__i_client_error_stack"][] = $db->errstr;
	}
	echo '__CLIENT__RESPONCE__START__'.serialize(array($r,$db->version,$db->format,$db->hasLargePrefix,$GLOBALS["__i_client_error_stack"]))."__CLIENT__RESPONCE__END__";
}
else
{
	echo '__CLIENT__RESPONCE__START__'.serialize(array(true,$db->version,$db->format,$db->hasLargePrefix,$GLOBALS["__i_client_error_stack"]))."__CLIENT__RESPONCE__END__";
}

?>